<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Psython</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2019-09-15T20:00:00+01:00</updated><subtitle>Psychology, Python, PhD</subtitle><entry><title>Numbers in python</title><link href="/python_nums_1.html" rel="alternate"></link><published>2019-09-15T20:00:00+01:00</published><updated>2019-09-15T20:00:00+01:00</updated><author><name>Spider</name></author><id>tag:None,2019-09-15:/python_nums_1.html</id><summary type="html">&lt;p&gt;Comfortably nums.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What follows is not written to be 100% accurate in all the technical detail. It is written to help people with limited knowledge of computers to get started with using python. As such, I have tried to limit jargon so if you already know terms like "object" and "class", or what a command line is, then this page ain't for you. Feel free to stick around though.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You now know how to &lt;a href=""&gt;make strings like a boss&lt;/a&gt;, meaning that when it comes to typing the language you use in everyday life you have the basics under your belt. What we're moving onto now is something that comes to mind more often when people think of computers:&lt;/p&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;Don't worry, we're not getting into complex maths, we're just going get used to playing with simple numbers in python. &lt;/p&gt;
&lt;h3&gt;Ints&lt;/h3&gt;
&lt;p&gt;The first way that python handles numbers is as the "int" type. This is basically just a whole number like 9 or 42(hehe) or 7000000000, the way you use numbers every day as you go through your life, doing numbery things... like counting "likes"... or what ever it is you people do.&lt;/p&gt;
&lt;h3&gt;Floats&lt;/h3&gt;
&lt;p&gt;The other way that python works with numbers is as floating-point numbers, of the "float" type. Just like ints, floats are pretty simple, they're just numbers followed by a decimal point. So 13.333333 is a float, and so is 0.2 etc. You know the deal. &lt;/p&gt;
&lt;h3&gt;Telling the difference&lt;/h3&gt;
&lt;p&gt;Hopefully, you remember that when using normal langauge in python you use quotation marks to tell python what it is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Like this. Python knows that this is a string.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With numbers however, python just knows what's hap'nin. This means you can just give python a number and every math instructions and python will give you back the result (again, we're taking it really slowly, you can do more than that). The usual math symbols, like + and - work just fine so lets just start there. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="/images/basic_math.png"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="introduction"></category><category term="numbers"></category></entry><entry><title>Setting up a place to work</title><link href="/python_2.html" rel="alternate"></link><published>2019-09-09T20:00:00+01:00</published><updated>2019-09-09T20:00:00+01:00</updated><author><name>Spider</name></author><id>tag:None,2019-09-09:/python_2.html</id><summary type="html">&lt;p&gt;Getting the ball rolling&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What follows is not written to be 100% accurate in all the technical detail. It is written to help people with limited knowledge of computers to get started with using python. As such, I have tried to limit jargon so if you already know terms like "object" and "class", or what a command line is, then this page ain't for you. Feel free to stick around though.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm assuming you've read my &lt;a href="https://spider-z3r0.github.io/python_1.html"&gt;first post on this topic&lt;/a&gt;, it's about a mindset that might be useful to you if you're new here. If you have, or you just want to get started, read on. &lt;/p&gt;
&lt;h2&gt;Getting started in python and spyder&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is make sure that python is installed on your computer and up to date. There's a few ways to do this, and if you have a Mac it's already there, but your fastest bet is to install &lt;a href="https://www.anaconda.com/distribution/"&gt;anaconda&lt;/a&gt;, which installs python and a few good programs that let you write and run code. &lt;/p&gt;
&lt;p&gt;These programs are called &lt;a href="https://www.dummies.com/programming/java/what-is-an-integrated-development-environment/"&gt;&lt;strong&gt;Integrated Development Environments&lt;/strong&gt;&lt;/a&gt;, but don't worry about that right now. The short version is they let you work on projects without needing to have loads of windows open on your computer. &lt;/p&gt;
&lt;p&gt;Once you have installed anaconda, open it up and you'll be presented with a grid of different "apps" (that's not the right term but we're gonna use it here) laid out in a grid. Now, you're free to use any of these apps and there's loads of reason to use each one, but I'm going to work in spyder because... well just because. I was advised to use spyder when I started out, and although I've moved on since, I'm advising you to do the same. &lt;/p&gt;
&lt;p&gt;So click "launch" on the spyder app and away we go... &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="/images/Spyder.png"&gt;&lt;/p&gt;
&lt;p&gt;Spyder consists of 3 seperate panes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The text editor, this is where you can write and edit code. &lt;/li&gt;
&lt;li&gt;The console, where your code runs (hopefully).&lt;/li&gt;
&lt;li&gt;The 3rd pane, which does multiple things, like let you view your variables and plots, find files etc. It's a good pane, I like it. It's kinda why we're using spyder.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The text editor.&lt;/h3&gt;
&lt;p&gt;So, I'm going to assume that you have edited text before, you've used Word, or written a facebook post/tweet? Well, in the simplest terms, the text editor is like a word page or a status box. You write in it, you can delete, jump around, copy and paste... do texty-things. In general you want to write code in here but you can include everyday language as well when you want to explain something, but we'll get to that later. What you need to take away from this is the text editor is like Word or Pages, you write your "document" (in this case some code) and can freely edit it from there. The cool thing is that you can tell the computer to read what you have written in the text editor, &lt;a href="https://spider-z3r0.github.io/python.html"&gt;&lt;em&gt;as a set of instructions&lt;/em&gt;&lt;/a&gt;, in the order you've written it, and the computer will do it. &lt;/p&gt;
&lt;p&gt;You can get the computer to read the whole document from top to bottom, or start in the middle, or just run the last bit, but really, you want to think of your code here like a story; it has a begining, a middle, and an end. You should be aiming to have it read like that with no jumping around.At least, once you've finished editing. &lt;/p&gt;
&lt;p&gt;One of the first things you'll do is make things show up in the console. &lt;/p&gt;
&lt;h3&gt;The Console.&lt;/h3&gt;
&lt;p&gt;The console is where the magic happens. When you tell your computer to do something, the console is where your computer will tell you what's happening. So if you tell your computer to say "Hello World!", unless otherwise stated you'll see: &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Hello World!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;in the console. &lt;/p&gt;
&lt;p&gt;You can also write code dierctly into the console and when you press enter the code will run, with the output appearing directly below the code you wrote. Honestly, I don't do that often because it looks messy. However, if I want to do something just once I will jump into the console. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, if your code doesn't work for some reason the console is where you find out what went wrong by showing you an error report. In essence, this is a just a guide that tell's you what went wrong and where in your code the problem is. I'm about to show you a chunk of code that you won't understand. Don't panic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#this is a bit of python code that doesn&amp;#39;t work. &lt;/span&gt;


  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/kevinomalley/Desktop/traceback_test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, don't panic. At first, things like this look scary, but really all it means is there is a typo in my code (compare the two black boxes to see if you can spot the difference), and where to find it. We'll cover this more fully later on, but what I want you to take away from this is that the console is your friend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is where the result of your code shows up. &lt;/li&gt;
&lt;li&gt;It can let you run a little bit of code just to check and see if it's what you want&lt;/li&gt;
&lt;li&gt;It tells you if somethings gone wrong and where to find the problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Good console. Lovely console. &lt;/p&gt;
&lt;h3&gt;The 3rd pane.&lt;/h3&gt;
&lt;p&gt;The 3rd pane in spyder is basically kind of a catch all. If you need to find output the console can't handle, like a graph, it'll be in there. If you want to open a file without leaving spyder, you can use that pane. If you've saved something as a variable (we'll cover what that means later), go to the 3rd pane to check it out. &lt;/p&gt;
&lt;p&gt;The most useful bit, that is really often overlooked is the &lt;strong&gt;"Help"&lt;/strong&gt; tab. Now, I'm gonna be honest with you here, at the very begining the help you get there is... not... amazing. You have to know a a fair amount of what's going on for it to be useful. That said it's worth using often, mainly because it'll get you comfortable with the jargon as you pick through what it means. To use it just highlight some text in the editor window and press control and i at the same time (command and i on a Mac) and an explanaition of the code will pop up in that box. It's something we'll touch off again a few times when we have our feet under the table a little more. &lt;/p&gt;
&lt;h2&gt;OK, now what?&lt;/h2&gt;
&lt;p&gt;What I've tried to do here is introduce you to one of the options you have for working with python, and give you a tour of what you're looking at so that it is no longer some dark world. There's a lot more going on and we'll get there, but as I've said from the outset, the point of this whole site is to take really really small steps to make you feel comfortable. &lt;/p&gt;
&lt;p&gt;What should you take away with you?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can write code in either the text editor or the console. For quick, small chunks the console is fine, but when it comes to writing your coding opus, or code you acctually want other people to read, that should be in the text editor.&lt;/li&gt;
&lt;li&gt;When you run code, whatever that code produces will show up in the console (for the most part). If it's an error, thats ok, they may look scary but they're actually really useful. That doesn't mean you want to see them too often, but when they show up, try not to feel bad.&lt;/li&gt;
&lt;li&gt;The 3rd pane is like a catch-all for the other stuff, either files you want to open that are somewhere else on your computer, or for the results of some code that can't go to the console (like a fancy pants scatter plot).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that in place you should be good and ready to start playing around in python using spyder as your playground. In the next post we'll cover the smallest bits of python that you'll come across often, integers, floats and strings. once you get used to playing with them you'll start to see the power of what you can do with code. &lt;/p&gt;
&lt;p&gt;Kev. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post Script&lt;/em&gt;&lt;/strong&gt;
&lt;em&gt;I don't really use spyder that much anymore, not because it's not cool, but because I've started using &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text 3&lt;/a&gt;. There are literally loads of programs you can use, and at least twice as many opinions on which is best. When you get comfortable with what's going on in spyder maybe start playing around with other IDE's. You'll find something that suits you, and then you may find that what suits you changes. It's all good.&lt;/em&gt;&lt;/p&gt;</content><category term="Python"></category><category term="introduction"></category><category term="spyder"></category></entry><entry><title>Starting with strings</title><link href="/python_strings_1.html" rel="alternate"></link><published>2019-09-09T20:00:00+01:00</published><updated>2019-09-09T20:00:00+01:00</updated><author><name>Spider</name></author><id>tag:None,2019-09-09:/python_strings_1.html</id><summary type="html">&lt;p&gt;Stingin' em along.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What follows is not written to be 100% accurate in all the technical detail. It is written to help people with limited knowledge of computers to get started with using python. As such, I have tried to limit jargon so if you already know terms like "object" and "class", or what a command line is, then this page ain't for you. Feel free to stick around though.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OK, now that you have &lt;a href="https://spider-z3r0.github.io/python_2.html"&gt;installed python and a program that lets you do python-y things&lt;/a&gt; its time to acutally....start doing python-y things. &lt;/p&gt;
&lt;p&gt;So, we're going to start with the way that you can type normal, everyday, English into python and have it recognised as such: &lt;/p&gt;
&lt;h2&gt;Strings!&lt;/h2&gt;
&lt;p&gt;A string is just a collection of alphanumeric text (letters and numbers and punctuation), and it's the first example of a python &lt;strong&gt;class&lt;/strong&gt; we're meeting. Now we're not going to cover classes here, it'll become clear over time, but what you need to know right now is that a class is the general name for something that python can work with. Strings are one type of class, there are many others, and eventually you'll even be able to make your own! &lt;/p&gt;
&lt;h3&gt;Fine Kev, get on with it!&lt;/h3&gt;
&lt;p&gt;OK, sorry! Sorry!&lt;/p&gt;
&lt;p&gt;I've just told you that python has a a way dealing with normal langauge, the trick is that you have wrap that text in quotes, otherwise python doesn't know what to do with it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Check out the apostrophies at the begining and the end of this sentence!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Boom. we have our first string! Python can read that sentence and can do stuff with it, awesome. However, let's take a look at another sentence and see if we can make a string out of it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Making strings is awesome, let&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the problem? Python treats the first apostrophe as the start of the string and the second apostrophe as the end of the string, even though it's not actually the end of the sentence. Now, we could just avoid every typing a contraction like "can't" or "didn't", and avoid Irish or Scottish surnames begining with O, but that seems like a special hell, does it not? &lt;/p&gt;
&lt;p&gt;Fortunately there's a simple fix; when we want to enter a string that includes an apostrophe in the text we use double quotes &lt;em&gt;" "&lt;/em&gt;, standard quotation marks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Now ain&amp;#39;t this a pretty string?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you may ask yourself&lt;/p&gt;
&lt;h3&gt;Why not just use " " every time?&lt;/h3&gt;
&lt;p&gt;The truth is I don't know why python gives you two options for designating a line of text as a string, but one thought I had is that it's faster to type 'hi' than it is to type "hi" because the second one requires that you hold down the shift key. &lt;/p&gt;
&lt;p&gt;There's some pretty cool things we can do with strings, but I'm gonna hold off on that for a little while. Before, we finish talking about strings though there's one last thing you should know, even though it won't come up a lot. That's how to handle strings that are more than one line long. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;This is a multi line string, it allows me to write&lt;/span&gt;
&lt;span class="sd"&gt;sentences that go on more than one line.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make a string that goes on more than one line you can use three apostrophies at the begining and the end &lt;em&gt;''' '''&lt;/em&gt;. This would allow you to type your magnum opus, or a delightful poem. But most frequently the strings you write are going to be pretty short so you just need apostrophies or quotation marks. There is a use for the tripple apostroie format called "docstrings" but we're a ways away from needing them, just remember that you can use them if you need to write a long string. &lt;/p&gt;
&lt;p&gt;OK, so now that you have seen how to make strings lets do your first bit of code. Go into the console in spyder and type 'Hello World!' and then press enter. You'll see something similar to the image below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="/images/hello_world_1.png"&gt;&lt;/p&gt;
&lt;p&gt;You just did your first thing in python!! Now granted, it wasn't very impressive... but hey, you still did it! Now to make your first error (trust me it'll be fine). Go back to the console and type Hello World, but leave out the apostrophies this time. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="/images/hello_world_2.png"&gt;&lt;/p&gt;
&lt;p&gt;And there it is! This is the first of many such errors. You'll see them often, especially when you start out, but as you progress you'll understand that they are really just a tool to make sure you get better and better. &lt;/p&gt;
&lt;p&gt;OK so now you know what strings are, and how to make them. Soon you'll doing awesome stuff with them. For right now though we're going to put strings aside, just for a minute and next we'll move onto using numbers in python. Not like crazy complicate number, just normal, everyday numbers. I promise it's easy. &lt;/p&gt;
&lt;p&gt;Kev&lt;/p&gt;</content><category term="Python"></category><category term="introduction"></category><category term="strings"></category></entry><entry><title>The Mindshift.</title><link href="/python_1.html" rel="alternate"></link><published>2019-09-08T20:00:00+01:00</published><updated>2019-09-08T20:00:00+01:00</updated><author><name>Spider</name></author><id>tag:None,2019-09-08:/python_1.html</id><summary type="html">&lt;p&gt;Thinking about coding&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, for some reason, you've decide decided that learning python would be a good thing to do. Great! I agree with you completely. &lt;/p&gt;
&lt;p&gt;Well... of course I do or this site would be pointless... &lt;/p&gt;
&lt;p&gt;We're going to get to the cool stuff in a minute but before we crack on I want to try to get an idea into your head that will be useful. For a lot of people nowadays, the process of using a computer, or phone, is the process of finding the right button and asking &lt;a href="https://en.wikipedia.org/wiki/Paranoia_(role-playing_game)"&gt;&lt;strong&gt;Friend Computer&lt;/strong&gt;&lt;/a&gt; to do something for you, and quite often, that's ok. &lt;/p&gt;
&lt;p&gt;However, for people who actually work on computers learning to code allows you to take on a slightly different mindset: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You're not asking the computer to do something, you're &lt;em&gt;telling&lt;/em&gt; the computer what to do.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From my experience teaching people data analysis with SPSS, I often see students "beseaching" the software to work, fearfully proffering thier data, seeking out the right buttons and then struggling to parse the output into an assignment or a paper, while not having a conceptual grasp of whats happening in the background. When using something like python, however, you are literally giving the computer instructions, you're the &lt;strong&gt;boss&lt;/strong&gt;. The computer is working for you, doing your bidding. &lt;/p&gt;
&lt;p&gt;Is that a subtle difference? Sure, but it's a meaningful one. Instead of being stuck with what the computer gives you, you tell it what you want, and (eventually) where you want it, and in what format. &lt;/p&gt;
&lt;p&gt;So while I understand that people find learning to code to be intimidating, I want to ask you to see yourself as the hero of this journey. 
 Not like the barbarian, more like the wizard. You will learn what you, get better and better, and slay all kinds of Dragons.  &lt;/p&gt;
&lt;p&gt;I dunno about you, but I'd rather be using tools and bending things to my will... I mean... being proactive. &lt;/p&gt;
&lt;h2&gt;So buckle up traveler and lets get to gettin'.&lt;/h2&gt;</content><category term="Python"></category><category term="introduction"></category><category term="mindset"></category></entry><entry><title>Welcome Traveller!</title><link href="/" rel="alternate"></link><published>2019-09-06T20:51:00+01:00</published><updated>2019-09-06T20:51:00+01:00</updated><author><name>Spider</name></author><id>tag:None,2019-09-06:/</id><summary type="html">&lt;p&gt;Don't call it an abstract.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My name is Kev and I'm a PhD student in the social sciences. I won't bore you with the details of my life but I will say that you are welcome and I hope you find something here that is useful to you. &lt;/p&gt;
&lt;p&gt;This site has a two-fold moral purpose. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To document my journey into &lt;a href="https://www.python.org/"&gt;python&lt;/a&gt; and programming in general.&lt;/li&gt;
&lt;li&gt;To help others if I can. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The short version is, the more I worked with &lt;strong&gt;SPSS&lt;/strong&gt; the more frustrated I became with it. Being of a technical bent, I decided to take the plunge and start using the little bit of programming knowledge I had to escape the monotony of copying and pasting and using my &lt;em&gt;human eyeballs&lt;/em&gt; to read data. Between one thing and another I decided that I would learn python and make that my tool of choice, and within a few weeks I was completely sold to the point of evangelising it where ever I could. &lt;/p&gt;
&lt;p&gt;So I completed a few data projects with python, wrote a few scripts, read a few books and the people around me were pretty impressed by the results, but, I kept coming up against the same issue time and again...&lt;/p&gt;
&lt;h3&gt;"I'm not technical enough to do that, it's cool though..."&lt;/h3&gt;
&lt;p&gt;Now, I know these people, they are much smarter than me, more diligent, and they can all spell betterer, so I decided there must be something I can do to help that isn't another long rant about how much better things are with just a few lines of code inder your belt. If you can write a letter, or a post-it or an &lt;em&gt;academic paper&lt;/em&gt; you can definitely write code. &lt;/p&gt;
&lt;h2&gt;Thus, this site.&lt;/h2&gt;
&lt;p&gt;The aim is to introduce people to tools like python, git, and markdown that will genuinely make life easier, and to do so in language that humans will understand. This won't be the &lt;a href="https://nostarch.com/pythoncrashcourse2e"&gt;"&lt;em&gt;best&lt;/em&gt;" introduction&lt;/a&gt; because there are much smarter people out there than me, who are really good at programming. But one of the things I've noticed while learning from those people is that they tend to take some steps for granted, steps that are &lt;em&gt;"obvious"&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;The problem is, when you start out, a lot of these things really aren't obvious, or at least it can take time for them to become obvious, and if they're skimmed over or they don't click quickly, it can easily leave you feeling like an idiot. Fortunately, I'm really good at feeling like an idiot and I have a healthy dose of background rage that helps me to push past that feeling until I can get something to work. &lt;/p&gt;
&lt;p&gt;I also really enjoy teaching, I love that feeling you get when something clicks into place, and I love seeing that "a-ha" look people get when something clicks for them. For that reason I like breaking things down to find the bit that experts forget to tell you because it's "obvious". It's normally that bit that keeps people stuck, and when that's the case it takes someone making it explicit and then some amount of practice before its "obvious" to you too. My aim here is to try to make that whole loop more enjoyable by taking the bits that were &lt;em&gt;hidden by obviousness&lt;/em&gt; and pointing them out where I can. &lt;/p&gt;
&lt;p&gt;I don't have a full plan going in, but I do have &lt;a href="https://spider-z3r0.github.io/python.html"&gt;an idea&lt;/a&gt;, so I'm just going to run with that. If you want to you can run along beside me.  &lt;/p&gt;
&lt;p&gt;So if you are interested stick around. If you're not then that's ok too but I hope that you do start using python and some of the &lt;a href="hhttps://www.youtube.com/watch?v=BCQHnlnPusY"&gt;other&lt;/a&gt; &lt;a href="https://www.sublimetext.com/"&gt;tools&lt;/a&gt; out there that let you go beyond Word, Excel, and SPSS becuase life's way more fun over here. &lt;/p&gt;
&lt;p&gt;Kev. &lt;/p&gt;</content><category term="Home"></category><category term="first"></category></entry></feed>